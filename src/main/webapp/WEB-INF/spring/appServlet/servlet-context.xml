<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	<!-- 위의 뷰리졸버(해석기)는 .jsp로 바인딩되는 역할을 합니다.그래서, 이것도 사용하고, 아래 JsonView도 동시에 같이 사용해야 함. -->
	<!-- 2개를 동시에 사용해야 해서, 뷰리졸버의 순서를 매겨야 합니다.  -->
	<!-- BeanNameViewResolver 설정추가 컨트롤러의 view이름을 파일명이 아닌 빈으로 리턴받을 수 있음.  -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
	  <beans:property name="order" value="1" />
	</beans:bean>
	<!-- 2010년 스프링 초창기 부터 사용했던 RestApi구현방식입니다. 컨트롤러에서 리턴받는 값을 아래 빈의 ID로 지정해서 jsp에서 return값으로 사용. -->
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
		
	<!-- 타일즈 템플릿 리졸버(해석기)를 추가 join.tiles를 리볼버(해석)이 가능하게됨. -->
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="order" value="0" />
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
	</beans:bean>
	<!-- 타일즈 설정파일 tiles-context가져오기 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:value>
			/WEB-INF/spring/tiles-context.xml
			</beans:value>
		</beans:property>
	</beans:bean>
		
	<context:component-scan base-package="com.edu.controller" />
	<context:component-scan base-package="com.edu.util" />
	<!-- AOP 프록시 저장소 추가 와 AOP기본설정 내용 자동추가됨. -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<aop:config></aop:config>
	
	<!-- form태그에서 multipart를 사용한다면, 리졸브(resolve-해석기) 스프링빈이 필요 -->
	<!-- commons.fileupload.~외부모듈이 필요합니다. 업로드용량 10메가로 제한함. -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760" />
	</beans:bean>
	
</beans:beans>